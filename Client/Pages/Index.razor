@page "/"
@inject NotificationService notificationService
@inject ILocalStorageService localStorage

<PageTitle>Rejestracja obywateli</PageTitle>
<div class="container">
    <h2>Rejestracja numerów PESEL</h2>
    <div class="row mt-3">
        <div class="col-lg-4">
            <RadzenLabel Text="Imię" />
            <RadzenTextBox style="width: 100%;" Name="Imię"  @bind-Value=@data.FirstName />
        </div>
        <div class="col-lg-4">
            <RadzenLabel Text="Nazwisko" />
            <RadzenTextBox style="width: 100%;" Name="Nazwisko"  @bind-Value=@data.LastName />
        </div>
        <div class="col-lg-4">
            <RadzenLabel Text="Data urodzenia" />
            <RadzenDatePicker @bind-Value=@data.DateOfBirth DateFormat="d" Class="w-100"  Name="Data urodzenia"/>
        </div>
    </div>

    <div class="row mt-3">
        <div class="col-lg-6">
            <h5 class="mb-4">Płeć</h5>
                <RadzenRadioButtonList @bind-Value=@data.Sex TValue="int">
                    <Items>
                        <RadzenRadioButtonListItem Text="Kobieta" Value="1" />
                        <RadzenRadioButtonListItem Text="Mężczyzna" Value="2" />
                    </Items>
                </RadzenRadioButtonList>
        </div>
         <div class="col-lg-6">
            <h5 class="mb-4">&nbsp;</h5>
             <RadzenButton Click=@(args => SaveCitizen()) Text="Generuj PESEL i zapisz obywatela" ButtonStyle="ButtonStyle.Secondary" />
        </div>
    </div>
</div>


@code {

    CitizenData data = new CitizenData();

    async Task SaveCitizen()
    {
        // walidacja danych
        if (!ValidateData(out string error))
        {
            var message = new NotificationMessage()
                {
                    Severity = NotificationSeverity.Error,
                    Summary = null,
                    Detail = error
                };

            notificationService.Notify(message);
            return;
        }


        // sprwdzanie czy istnieje lista obywateli
        int currentCitizenIndex = 0;
        List<Man> mans = new List<Man>();
        List<Woman> womans = new List<Woman>();


        var listMan = await localStorage.GetItemAsync<string>("siskMans");
        var listWoman = await localStorage.GetItemAsync<string>("siskWomans");

        if (listMan != null)
        {
            mans = JsonConvert.DeserializeObject<List<Man>>(listMan);
            currentCitizenIndex = mans.Count;
        }

        if (listWoman != null)
        {
            womans = JsonConvert.DeserializeObject<List<Woman>>(listWoman);
            currentCitizenIndex = womans.Count;
        }


        // zapis obywatela
        if (data.Sex == 1)
        {
            var woman = new Woman(data.FirstName, data.LastName, data.DateOfBirth, currentCitizenIndex);
            womans.Add(woman);
            var listToSave = JsonConvert.SerializeObject(womans);
            await localStorage.SetItemAsync<string>("siskWomans", listToSave);
        }
        else
        {
            var man = new Man(data.FirstName, data.LastName, data.DateOfBirth, currentCitizenIndex);
            mans.Add(man);
            var listToSave = JsonConvert.SerializeObject(mans);
            await localStorage.SetItemAsync<string>("siskMans", listToSave);
        }
    }


    bool ValidateData(out string error)
    {
        error = "Proszę uzupełnić dane";
        if (data.DateOfBirth == DateTime.MinValue) return false;
        if (string.IsNullOrWhiteSpace(data.FirstName)) return false;
        if (string.IsNullOrWhiteSpace(data.LastName)) return false;
        if (data.Sex == 0) return false;

        if (data.DateOfBirth > DateTime.Now)
        {
            error = "Nieprawidłowa data";
            return false;
        }

        return true;
    }



}








