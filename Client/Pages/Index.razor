@page "/"
@inject NotificationService notificationService
@inject ILocalStorageService localStorage

<PageTitle>Rejestracja obywateli</PageTitle>
<div class="container">
    <h2>Rejestracja numerów PESEL</h2>
    <div class="row mt-3">
        <div class="col-lg-4">
            <RadzenLabel Text="Imię" />
            <RadzenTextBox style="width: 100%;" Name="Imię"  @bind-Value=@data.FirstName />
        </div>
        <div class="col-lg-4">
            <RadzenLabel Text="Nazwisko" />
            <RadzenTextBox style="width: 100%;" Name="Nazwisko"  @bind-Value=@data.LastName />
        </div>
        <div class="col-lg-4">
            <RadzenLabel Text="Data urodzenia" />
            <RadzenDatePicker @bind-Value=@data.DateOfBirth DateFormat="d" Class="w-100"  Name="Data urodzenia"/>
        </div>
    </div>

    <div class="row mt-3">
        <div class="col-lg-6">
            <h5 class="mb-4">Płeć</h5>
                <RadzenRadioButtonList @bind-Value=@data.Sex TValue="int">
                    <Items>
                        <RadzenRadioButtonListItem Text="Kobieta" Value="1" />
                        <RadzenRadioButtonListItem Text="Mężczyzna" Value="2" />
                    </Items>
                </RadzenRadioButtonList>
        </div>
         <div class="col-lg-6">
            <h5 class="mb-4">&nbsp;</h5>
             <RadzenButton Click=@(args => SaveCitizen()) Text="Generuj PESEL i zapisz obywatela" ButtonStyle="ButtonStyle.Secondary" />
        </div>
    </div>
</div>


@code {

    List<Citizen> citizens;
    CitizenData data = new CitizenData();
    protected override async Task OnInitializedAsync()
    {
        var json = await localStorage.GetItemAsStringAsync("pesel1sisk");
        if (json == null)
            citizens = new List<Citizen>();
        else
            citizens = JsonConvert.DeserializeObject<List<Citizen>>(json);
    }


    async Task SaveCitizen()
    {
        if (!ValidateData(out string error))
        {
            var messageError = new NotificationMessage()
                {
                    Severity = NotificationSeverity.Error,
                    Summary = null,
                    Detail = error
                };

            notificationService.Notify(messageError);
            return;
        }

        int currentCitizenIndex = citizens.Count == 0 ? 0 : citizens.Count;
        var citizen = new Citizen(data.FirstName, data.LastName, data.DateOfBirth, data.Sex);
        citizen.GeneratePESEL(currentCitizenIndex);
        citizens.Add(citizen);
        var json = JsonConvert.SerializeObject(citizens);
        await localStorage.SetItemAsStringAsync("pesel1sisk", json);
        var message = new NotificationMessage()
            {
                Severity = NotificationSeverity.Success,
                Summary = null,
                Detail = "Zapisano obywatela i nadano numer PESEL"
            };
        notificationService.Notify(message);
        data = new CitizenData();
    }


    bool ValidateData(out string error)
    {
        error = "Proszę uzupełnić dane";
        if (data.DateOfBirth == DateTime.MinValue) return false;
        if (string.IsNullOrWhiteSpace(data.FirstName)) return false;
        if (string.IsNullOrWhiteSpace(data.LastName)) return false;
        if (data.Sex == 0) return false;

        if (data.DateOfBirth > DateTime.Now)
        {
            error = "Nieprawidłowa data";
            return false;
        }

        return true;
    }



}








